import { Injectable, inject } from '@angular/core';
import { catchError, map, mergeMap, retry, take } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { EnvironmentService } from '../../shared/services/environment.service';
import * as i0 from "@angular/core";
export class HomePageApiService {
    constructor() {
        this.http = inject(HttpClient);
        this.env = inject(EnvironmentService);
    }
    /**
      *
      * @param lang
      * @returns all airports depends on the current languague
      */
    UtilityAirports(lang) {
        let API = `${this.env.backOffice}/api/GetSearchFlowMapping?LangCode=${lang}`;
        return this.http.get(API).pipe(retry(3), take(1), catchError(err => { console.log(err); throw err; }));
    }
    /**
     *
     * @param baseCurrency
     * @returns all currency with their changing rate depends on the base currency
     */
    currencyApi(baseCurrency) {
        let API = `${this.env.admin}/api/CurrencyApi?currency=${baseCurrency}`;
        return this.http.get(API).pipe(retry(3), take(1), catchError(err => { console.log(err); throw err; }));
    }
    /**
     *
     * @returns current point of sale by fetching current ip then get this ip location/(POS)
     */
    pointOfSale() {
        let api = "https://api.ipify.org/?format=json";
        return this.http.get(api).pipe(retry(2), take(1), mergeMap((result) => {
            console.log("show me first response", result);
            return this.http.get(`https://ipapi.co/${result.ip}/json/`);
        }), catchError(err => { console.log(err); throw err; }));
    }
    /**
     *
     * @param lang
     * @returns take language and return contries and countries codes
     */
    getCountries(lang) {
        let api = `${this.env.backOffice}/api/GetAllCountriesByLangName?LangCode=${lang}`;
        return this.http.get(api).pipe(retry(2), take(1), catchError(err => { console.log(err); throw err; }));
    }
    /**
     *
     * @param pos
     * @returns All offers of type OfferDTO[] depending on the current point of sale
     */
    GetAllOffers(pos) {
        let API = `${this.env.offers.getAllActive}${pos}`;
        return this.http.get(API).pipe(take(1), retry(3), catchError(err => { console.log(err, "ERROR IN GETTING ALL OFFERS"); throw err; }));
    }
    /**
  *
  * @param id
  * @returns a specific offer of type OfferDTO[] depending on the given ID
  */
    getOfferBYId(id) {
        let API = `${this.env.offers.getByID}${id}`;
        return this.http.get(API).pipe(retry(3), take(1), map((res) => { return res; }), catchError(err => { console.log(err, "ERROR IN GETTING OFFER BY ID"); throw err; }));
    }
    /**
     *
     * @param Source
     * @param LanguageCode
     * @param body
     * @param searchID
     * @returns It takes source, language and searchID parameters and post the body
     * of the request as the booked offer model(body:BookedOffer)
     */
    BookOffers(Source, LanguageCode, body, searchID) {
        let API = `${this.env.offers.BookOffer}`;
        const httpOptions = {
            headers: new HttpHeaders({
                'Source': Source, 'LanguageCode': LanguageCode, 'searchID': searchID
            })
        };
        let Body = {
            BookedOffer: body
        };
        return this.http.post(API, Body, httpOptions).pipe(take(1), map((result) => { console.log("show backend book offer response", result); return result; }));
    }
    /**
* @param id
* @returns itinerary depending on the given ID if the service type is offline.
*/
    retriveItinerary(id) {
        let API = `${this.env.offlineSeats}${this.env.offers.RetriveItineraryDetails}?ItineraryId=${id}`;
        return this.http.get(API).pipe(retry(3), take(1), catchError(err => { console.log(err); throw err; }));
    }
}
HomePageApiService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: HomePageApiService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
HomePageApiService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: HomePageApiService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: HomePageApiService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,