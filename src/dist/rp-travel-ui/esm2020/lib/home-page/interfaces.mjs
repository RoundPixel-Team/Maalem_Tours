export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../projects/rp-travel-ui/src/lib/home-page/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * all currency Model according to backend response\r\n */\r\nexport interface currencyModel {\r\n    ID:number,\r\n    Currency_Code:string,\r\n    Currency_Name:string,\r\n    Is_Base_Currency:boolean,\r\n    Image_Url:string,\r\n    rate : number\r\n }\r\n\r\n /**\r\n * point Of Sale Model according to backend response\r\n */\r\n export interface pointOfSaleModel { \r\n    ip?:string,\r\n    city?:string,\r\n    region?:string,\r\n    region_code?:string,\r\n    country?:string,\r\n    country_name?:string,\r\n    country_nameAr?:string,\r\n    continent_code?:string,\r\n    airport?:string\r\n    country_capital?:string,\r\n    in_eu?:boolean,\r\n    postal?:any,\r\n    latitude?:number,\r\n    longitude?:number,\r\n    timezone?:string,\r\n    utc_offset?:string,\r\n    country_calling_code?:string,\r\n    currency?:string,\r\n    languages?:string,\r\n    asn?:string,\r\n    org?:string\r\n}\r\n /**\r\n * airPorts Model according to backend response\r\n */\r\n export interface airPorts {\r\n    airportCode:string,\r\n    airportName:string,\r\n    cityName:string,\r\n    cityCode:string,\r\n    countryCode:string,\r\n    countryName:string,\r\n    regionName:string\r\n}\r\n\r\n /**\r\n * countries Model according to backend response\r\n */\r\nexport interface countries {\r\n    pseudoCountryCode:string,\r\n    countryName:string,\r\n    regionName:string,\r\n    phoneCode:any\r\n}\r\n\r\n\r\n/**\r\n * get all Cities Model according to backend response\r\n */\r\nexport interface hotelCities {\r\n    CityId:string,\r\n     City: string,\r\n     Country: string,\r\n     CityWithCountry: string,\r\n     CountryCode:string\r\n}\r\n\r\n\r\n/**\r\n * dynamic top destinations Model according to backend response\r\n */\r\nexport interface topCityFlight {\r\n    id: number,\r\n    distination: string,\r\n    distinationAr:string,\r\n    airportCode: string,\r\n    price: number,\r\n    currencyCode: string,\r\n    tag: string,\r\n    tagAr:string\r\n    flightType: string,\r\n    imageURL: string,\r\n    tripIdeas: boolean\r\n}\r\n\r\n\r\n/**\r\n * dynamic trip ideas Model according to backend response\r\n */\r\nexport interface tripIdeas {\r\n    tripIdea:string,\r\n    tribIdeaAr:string,\r\n    trips:topCityFlight[]\r\n}\r\n/**\r\n * Offers Models according to backend response\r\n */\r\nexport interface OfferDTO {\r\n    agentId: string;\r\n    bookedQuantity:number;\r\n    currency: string;\r\n    endDate: Date;\r\n    imageID:number;\r\n    netProfit:number;\r\n    offerCode: number;\r\n    offerDays: OfferDay[];\r\n    offerDescription: string;\r\n    offerImage: Image;\r\n    offerName: string;\r\n    offerProvider: string;\r\n    offerServices:OfferService[]\r\n    offerStatus: number;\r\n    offerTag:number;   \r\n    paymentMethod: string;\r\n    pos: string;\r\n    salesChannel: string;\r\n    totalSellPrice: number;\r\n    startDate: Date;\r\n    totalCostPrice: number;\r\n    totalQuantity: number;\r\n}\r\n\r\nexport interface OfferDay {\r\n    DayDescription: string;\r\n    DayDate: Date;\r\n    OfferServices: OfferService[];\r\n}\r\n\r\nexport interface OfferService {\r\n    serviceType: string;\r\n    serviceDescription: string;\r\n    servicePrice: number;\r\n    includedCities: IncludedCity[];\r\n    serviceImage: Image[];\r\n    airline:Airlines[],\r\n    offlineItinerary: number |string,\r\n    hotelName:string,\r\n    hotelRate:number,\r\n    roomBasis:string,\r\n    nights:number,\r\n    roomType:string,\r\n    hotelAmenties:HotemAmenties[]\r\n}\r\n\r\nexport interface HotemAmenties {\r\n    amenity : string\r\n}\r\nexport interface IncludedCity {\r\n    CityCode: string;\r\n    CityName: string;\r\n    CityType: string;\r\n}\r\n\r\nexport interface Image {\r\n    imageDescription: string;\r\n    url: string;\r\n    imageID?: number;\r\n    serviceIndex?: number;\r\n    dayIndex?: number\r\n}\r\nexport interface OfferUpdate {\r\n    OfferCode: number;\r\n    OfferDTO: OfferDTO;\r\n}\r\n\r\nexport interface CurrencyModule {\r\n    ID: number,\r\n    Currency_Code: string,\r\n    Currency_Name: string,\r\n    Is_Base_Currency: string,\r\n    Image_Url: string,\r\n    rate: number\r\n}\r\n\r\nexport interface HotelsCitiesModule {\r\n    CityId: string,\r\n    City: string,\r\n    Country: string,\r\n    CityWithCountry: string,\r\n    CountryCode: string\r\n}\r\n\r\nexport interface imageObject {\r\n    ImageDescription: string;\r\n    Image: any;\r\n    serviceIndex?: number;\r\n    dayIndex?: number\r\n}\r\nexport interface BookedOffersFilterObject {\r\n    OfferBookingNo?: string,\r\n    PhoneNumber: string,\r\n    PhoneCountryCode: string,\r\n    Email: string,\r\n    FullName: string,\r\n    Nationality: string,\r\n    SelectedOfferCode: string,\r\n    BookingDate?: string,\r\n    ProviderID?: string,\r\n    BookedOfferStatus?: string,\r\n    IncludedCities?:Cities[],\r\n    BookingStatusName?:string\r\n}\r\nexport interface Cities{\r\n    \r\n          CountryCode: string,\r\n          CityName: string,\r\n          CityType: string\r\n}\r\n\r\n\r\n\r\nexport interface Airlines{\r\n    airlineCode:string,\r\n    languageCode:string,\r\n    airlineName:string,\r\n    alternativeBusinessName:string,\r\n    airlineLogo:string,\r\n    passportDetailsRequired:boolean\r\n}\r\n/**\r\n * Book an offer form model\r\n */\r\nexport interface BookedOffer {\r\n  \r\n    PhoneNumber: string ,\r\n    PhoneCountryCode: string,\r\n    Email: string,\r\n    FullName: string,\r\n    Nationality: string,\r\n    SelectedOfferCode: number\r\n  }\r\n/**\r\n * Offline seats interfaces according to backend response\r\n */\r\nexport interface Itinerary {\r\n    airItineraryId?: string\r\n    flightType:string,\r\n    departureAirportCode:string,\r\n    arrivalAirportCode:string,\r\n    airline:string,\r\n    status:boolean | string,\r\n    flightContractId:number | string, \r\n    onWardFlightsDTO:OnWardFlightsDTO[],\r\n    TotalFlightFare:totalFlightFare,\r\n    ItineraryAvailabilitiesDTO:AddAvailablity,\r\n    ItineraryCalendarDTOs:itineraryCalendarDTO[]\r\n}\r\n\r\nexport interface OnWardFlightsDTO  {\r\n    elapsedTime:number | string,\r\n    onWardFlightId?: string,\r\n    airItineraryId?: string,\r\n    departureAirportCode: string,\r\n    arrivalAirportCode: string,\r\n    flightSegmentsDTO:FlightSegmentsDTO[]     \r\n}\r\n\r\nexport interface FlightSegmentsDTO {\r\n    AirlineLogo?:string\r\n    departureDate:\tstring,\r\n    arrivalDate:\tstring,\r\n    duration:number | string\r\n    DepartureOffset:number | string,\r\n    ArrivalOffset:number | string,\r\n    IsStopSegment:boolean | string,\r\n    airlineRefrence:string,\r\n    ArrivalTerminal:string,\r\n    DepartureTerminal:string,\r\n    MarketingAirlineCode:string,\r\n    OperatedAirlineCode:string,\r\n    DepartureAirportCode:string,\r\n    ArrivalAirportCode:string,\r\n    EquipmentNumber:any,\r\n    FlightNumber:any,\r\n    ArrivalTime:string,\r\n    DepartureTime:string,\r\n    MealCode:string,\r\n    TransitTime:string,\r\n    seqNum : number | string,\r\n    passengerBaggageInfosDTO:PassengerBaggageInfoDTO[]\r\n\r\n}\r\n\r\nexport interface PassengerBaggageInfoDTO{\r\n    baggageCode?:\tstring\r\n    passengerType:\tstring\r\n    airlineCode:\tstring\r\n    weight:\t        number | string\r\n    unit:\t        string\r\n    size:\t        number | string\r\n    flightSegmentId?:string\r\n}\r\nexport interface totalFlightFare {\r\n    currency: string,\r\n    taxeFare: number | string,\r\n    flightFare: number | string,\r\n    totalFare: number | string\r\n  }\r\n  export interface AddAvailablity {\r\n\r\n    id?: string,\r\n    numOfAvailSeats: number | string,\r\n    maxUesd: number | string,\r\n    adtPrice: number | string,\r\n    cnnPrice: number | string,\r\n    infPrice: number | string,\r\n    adtPublishPrice: number | string,\r\n    cnnPublishPrice: number | string,\r\n    infPublishPrice: number | string,\r\n    adtPromoPrice: number | string,\r\n    cnnPromoPrice: number | string,\r\n    infPromoPrice: number | string,\r\n    adtTaxes: number | string,\r\n    cnnTaxes: number | string,\r\n    infTaxes: number | string,\r\n    pnr: string,\r\n    status: boolean | string,\r\n    cabinClass: string,\r\n    currency: string ,\r\n    isRefundable: boolean | string,\r\n    availableType: string,\r\n    airItineraryId?: string,\r\n    availableFrom: string,\r\n    availableTo: string\r\n  \r\n}\r\nexport interface itineraryCalendarDTO {\r\n    id?: string,\r\n    numOfAvailSeats: number | string,\r\n    numUsed: number | string,\r\n    maxUesd: number | string,\r\n    date: string,\r\n    departureAirportCode: string,\r\n    arrivalAirportCode: string,\r\n    pos: string,\r\n    airline: string,\r\n    cabineClass: string,\r\n    status: boolean | string,\r\n    flightType: string,\r\n    airItineraryId?: string\r\n}"]}